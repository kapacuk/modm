/*
 * Copyright (c) 2009, Martin Rosekeit
 * Copyright (c) 2009-2011, Fabian Greif
 * Copyright (c) 2010-2011, 2013, Georgi Grinshpun
 * Copyright (c) 2013-2014, Sascha Schade
 * Copyright (c) 2013, 2016, Kevin Läufer
 * Copyright (c) 2013-2017, Niklas Hauser
 * Copyright (c) 2018, Lucas Mösch
 * Copyright (c) 2021, Raphael Lehmann
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#include "../device.hpp"
%% if "Lpuart" in uart_type
#include "lpuart_{{ id }}.hpp"
%% else
#include "uart_{{ id }}.hpp"
%%endif

%% if buffered
#include <modm/architecture/interface/atomic_lock.hpp>
%% if not has_freertos_queue
#include <modm/architecture/driver/atomic/queue.hpp>
%% endif

namespace
{
%% if options["buffer.rx"]
%% if has_freertos_queue
    static StaticQueue_t rxQueueStructure;
    static uint8_t rxStorage[ {{ options["buffer.rx"] }} ];
    static QueueHandle_t rxQueue = xQueueCreateStatic(sizeof(rxStorage), 1, rxStorage, &rxQueueStructure);
%% else
	static modm::atomic::Queue<uint8_t, {{ options["buffer.rx"] }}> rxBuffer;
%% endif
%% endif
%% if options["buffer.tx"]
%% if has_freertos_queue
    static StaticQueue_t txQueueStructure;
    static uint8_t txStorage[ {{ options["buffer.rx"] }} ];
    static QueueHandle_t txQueue = xQueueCreateStatic(sizeof(txStorage), 1, txStorage, &txQueueStructure);
%% else
	static modm::atomic::Queue<uint8_t, {{ options["buffer.tx"] }}> txBuffer;
%% endif
%% endif
}
%% endif

namespace modm::platform
{

void
{{ name }}::writeBlocking(uint8_t data)
{
	while(!{{ hal }}::isTransmitRegisterEmpty());
	{{ hal }}::write(data);
}

void
{{ name }}::writeBlocking(const uint8_t *data, std::size_t length)
{
	while (length-- != 0) {
		writeBlocking(*data++);
	}
}

void
{{ name }}::flushWriteBuffer()
{
%% if options["buffer.tx"]
	while(!isWriteFinished());
%% else
	return;
%% endif
}

bool
{{ name }}::write(uint8_t data
%% if has_freertos_queue
                 , TickType_t timeout
%% endif
    )
{
%% if options["buffer.tx"]
	if(transmitBufferSize() == 0 && {{ hal }}::isTransmitRegisterEmpty()) {
		{{ hal }}::write(data);
	} else {
%% if has_freertos_queue
        if (xQueueSend( txQueue, &data, timeout ) != pdTRUE)
%% else
		if (!txBuffer.push(data))
%% endif
			return false;
		// Disable interrupts while enabling the transmit interrupt
		atomic::Lock lock;
		// Transmit Data Register Empty Interrupt Enable
		{{ hal }}::enableInterrupt(Interrupt::TxEmpty);
	}
	return true;
%% else
	if({{ hal }}::isTransmitRegisterEmpty()) {
		{{ hal }}::write(data);
		return true;
	} else {
		return false;
	}
%% endif
}

std::size_t
{{ name }}::write(const uint8_t *data, std::size_t length
%% if has_freertos_queue
                 , TickType_t timeout
%% endif
    )
{
	uint32_t i = 0;
	for (; i < length; ++i)
	{
		if (!write(*data++
%% if has_freertos_queue
                   , timeout
%% endif
                )) {
			return i;
		}
	}
	return i;
}

bool
{{ name }}::isWriteFinished()
{
%% if options["buffer.tx"]
	return transmitBufferSize() == 0 && {{ hal }}::isTransmitRegisterEmpty();
%% else
	return {{ hal }}::isTransmitRegisterEmpty();
%% endif
}

std::size_t
{{ name }}::transmitBufferSize()
{
%% if options["buffer.tx"]
%% if has_freertos_queue
    return uxQueueMessagesWaiting( txQueue );
%% else
	return txBuffer.getSize();
%% endif
%% else
	return {{ hal }}::isTransmitRegisterEmpty() ? 0 : 1;
%% endif
}

std::size_t
{{ name }}::discardTransmitBuffer()
{
%% if options["buffer.tx"]
	// disable interrupt since buffer will be cleared
	{{ hal }}::disableInterrupt({{ hal }}::Interrupt::TxEmpty);
	std::size_t count = transmitBufferSize();
%% if has_freertos_queue
    xQueueReset( txQueue );
%% else
	while(!txBuffer.isEmpty())
		txBuffer.pop();
%% endif
	return count;
%% else
	return 0;
%% endif
}

bool
{{ name }}::read(uint8_t &data
%% if has_freertos_queue
                 , TickType_t timeout
%% endif
    )
{
%% if options["buffer.rx"]
%% if has_freertos_queue
    return ( xQueueReceive(rxQueue, &data, timeout) == pdTRUE );
%% else
	if (rxBuffer.isEmpty()) {
		return false;
	} else {
		data = rxBuffer.get();
		rxBuffer.pop();
		return true;
	}
%% endif
%% else
	if({{ hal }}::isReceiveRegisterNotEmpty()) {
		{{ hal }}::read(data);
		return true;
	} else {
		return false;
	}
%% endif
}


std::size_t
{{ name }}::read(uint8_t *data, std::size_t length
%% if has_freertos_queue
                , TickType_t timeout
%% endif
    )
{
%% if options["buffer.rx"]
	uint32_t i = 0;
	for (; i < length; ++i)
%% if has_freertos_queue
        if( xQueueReceive(rxQueue, data++, timeout) != pdTRUE )
            return i;
%% else
	{
		if (rxBuffer.isEmpty()) {
			return i;
		} else {
			*data++ = rxBuffer.get();
			rxBuffer.pop();
		}
	}
%% endif
	return i;
%% else
	(void)length; // avoid compiler warning
	if(read(*data)) {
		return 1;
	} else {
		return 0;
	}
%% endif
}

std::size_t
{{ name }}::receiveBufferSize()
{
%% if options["buffer.rx"]
%% if has_freertos_queue
    return uxQueueMessagesWaiting( rxQueue );
%% else
	return rxBuffer.getSize();
%% endif
%% else
	return {{ hal }}::isReceiveRegisterNotEmpty() ? 1 : 0;
%% endif
}

std::size_t
{{ name }}::discardReceiveBuffer()
{
%% if options["buffer.rx"]
	std::size_t count = 0;
%% if has_freertos_queue
    uint8_t data;
    while( uxQueueMessagesWaiting( rxQueue ) > 0 ) {
        ++count;
        xQueueReceive( rxQueue, &data, 0 );
    }
%% else
	while(!rxBuffer.isEmpty()) {
		++count;
		rxBuffer.pop();
	}
%% endif
	return count;
%% else
	return 0;
%% endif
}

bool
{{ name }}::hasError()
{
	return {{ hal }}::getInterruptFlags().any(
		{{ hal }}::InterruptFlag::ParityError |
#ifdef USART_ISR_NE
		{{ hal }}::InterruptFlag::NoiseError |
#endif
		{{ hal }}::InterruptFlag::OverrunError | {{ hal }}::InterruptFlag::FramingError);
}
void
{{ name }}::clearError()
{
	return {{ hal }}::acknowledgeInterruptFlags(
		{{ hal }}::InterruptFlag::ParityError |
#ifdef USART_ISR_NE
		{{ hal }}::InterruptFlag::NoiseError |
#endif
		{{ hal }}::InterruptFlag::OverrunError | {{ hal }}::InterruptFlag::FramingError);
}

}	// namespace modm::platform

%% if buffered
%% if name in shared_irqs.keys()
void
modm::platform::{{ name }}::irq()
%% else
MODM_ISR({{ name | upper }})
%% endif
{
%% if has_freertos_queue
    BaseType_t xHigherPriorityTaskWoken;
%% endif
	using namespace modm::platform;
%% if options["buffer.rx"]
	if ({{ hal }}::isReceiveRegisterNotEmpty()) {
		// TODO: save the errors
		uint8_t data;
		{{ hal }}::read(data);
%% if has_freertos_queue
        xQueueSendFromISR( rxQueue, &data, &xHigherPriorityTaskWoken );
%% else
		rxBuffer.push(data);
%% endif
	}
%% endif
%% if options["buffer.tx"]
	if ({{ hal }}::isTransmitRegisterEmpty()) {
%% if has_freertos_queue
        if( xQueueIsQueueEmptyFromISR( txQueue ) == pdTRUE ) {
%% else
		if (txBuffer.isEmpty()) {
%% endif
			// transmission finished, disable TxEmpty interrupt
			{{ hal }}::disableInterrupt({{ hal }}::Interrupt::TxEmpty);
		}
		else {
            uint8_t data;
%% if has_freertos_queue
            xQueueReceiveFromISR( txQueue, &data, &xHigherPriorityTaskWoken );
%% else
			data = txBuffer.get();
			txBuffer.pop();
%% endif
            {{ hal }}::write(data);
		}
	}
%% endif
	{{ hal }}::acknowledgeInterruptFlags({{ hal }}::InterruptFlag::OverrunError);
%% if has_freertos_queue
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
%% endif
}
%% endif
